📁 Directory structure for '.'
.
├── .gitignore
├── README.md
├── argo-cd
│   ├── apps
│   │   ├── dev
│   │   │   ├── app-space-dev.yaml
│   │   │   └── app-world-dev.yaml
│   │   └── pre
│   │       ├── app-space-pre.yaml
│   │       └── app-world-pre.yaml
│   └── projects
│       ├── project-dev.yaml
│       └── project-pre.yaml
├── export_poc_structure.sh
├── helm-base
│   ├── Chart.yaml
│   ├── _helpers.tpl
│   ├── templates
│   │   ├── config-map.yaml
│   │   ├── deployment.yaml
│   │   ├── external-secrets.yaml
│   │   ├── hpa.yaml
│   │   ├── ingress.yaml
│   │   ├── persistentVolume.yaml
│   │   ├── persistentVolumeClaim.yaml
│   │   ├── rollout.yaml
│   │   ├── service-canary.yaml
│   │   ├── service-preview.yaml
│   │   └── service.yaml
│   └── values.yaml
├── kustomize
│   ├── apps
│   │   ├── space
│   │   │   ├── base
│   │   │   │   └── kustomization.yaml
│   │   │   └── overlays
│   │   │       ├── dev
│   │   │       │   └── kustomization.yaml
│   │   │       └── pre
│   │   │           └── kustomization.yaml
│   │   └── world
│   │       ├── base
│   │       │   └── kustomization.yaml
│   │       └── overlays
│   │           ├── dev
│   │           │   └── kustomization.yaml
│   │           └── pre
│   │               └── kustomization.yaml
│   └── components
│       ├── carbone
│       │   └── base
│       │       ├── helmrelease.yaml
│       │       ├── kustomization.yaml
│       │       └── values.yaml
│       ├── helloworld
│       │   └── base
│       │       ├── helmrelease.yaml
│       │       ├── kustomization.yaml
│       │       └── values.yaml
│       ├── moon
│       │   └── base
│       │       ├── helmrelease.yaml
│       │       ├── kustomization.yaml
│       │       └── values.yaml
│       ├── sun
│       │   └── base
│       │       ├── helmrelease.yaml
│       │       ├── kustomization.yaml
│       │       └── values.yaml
│       └── world
│           └── base
│               ├── helmrelease.yaml
│               ├── kustomization.yaml
│               └── values.yaml
├── skeleton-poc-argo-cd.txt
├── skeleton-poc-helm-base.txt
├── skeleton-poc-kustomize.txt
└── skeleton-poc-root.txt

31 directories, 48 files

📄 File contents within '.' (recursive)

==== ./README.md ====
# GitOps Proof of Concept (PoC)  
**Version: 3.0.0**

---

## 1. Introduction

This repository demonstrates a modern GitOps workflow using a robust stack of Cloud Native tools. It showcases best practices for application composition, continuous deployment, and progressive delivery on Kubernetes.

**Core Technologies:**
- **Argo CD:** GitOps agent that continuously syncs the Kubernetes cluster state to match the desired state in Git.
- **Helm:** Used as the base templating engine for creating standard, reusable application definitions.
- **Kustomize:** Declarative management and customization of the Helm-generated manifests, enabling environment-specific configurations.
- **Argo Rollouts:** Advanced deployment strategies (Canary, Blue-Green) for safe, progressive delivery, now integrated into the base Helm chart.

**Applications:**
- `world`
- `space`

Each is composed of several microservices and configured for different deployment strategies and environments (dev, pre).

---

## 2. Core Concepts

### 2.1. GitOps with Argo CD ("App of Apps" per Environment)

- **Source of Truth:** This repository is the single source of truth. All cluster changes are made via commits.
- **Environment-Driven Management:** We use the **"App of Apps" per Environment** pattern. A root application exists for each environment (e.g., `root-app-dev`), which in turn discovers and manages all applications belonging to that environment.
- **Automated Sync:** `syncPolicy: automated` ensures Argo CD automatically applies detected changes, keeping the cluster state in sync with Git.

### 2.2. Component Management with Helm & Kustomize

This PoC uses a powerful combination of Helm for templating and Kustomize for customization.

- **Base Helm Chart (`helm-base/`):** A single, standardized Helm chart located in `helm-base/` defines the "shape" of all our applications. It contains templates for Kubernetes resources like `Deployments`, `Rollouts`, `Services`, `HPA`, etc.
- **Components (`kustomize/components/`):** Each microservice is defined as a Kustomize component. However, instead of containing raw YAML, the `base` of each component now primarily contains two files:
  1. `kustomization.yaml`: Points to the local Helm chart in `helm-base/`.
  2. `values.yaml`: Provides the specific configuration values for that component (e.g., image name, port, rollout strategy).
- **Application Overlays (`kustomize/apps/`):** These still compose complete applications from components and apply environment-specific patches (e.g., different image tags for `dev` vs. `pre`, replica counts, etc.).

---

## 3. Advanced Deployment Strategies with Argo Rollouts

Progressive delivery is now built into our base Helm chart and can be enabled and configured via each component's `values.yaml` file.

### 3.1. Canary Release

**Configuration:** In a component's `values.yaml`, set:

```yaml
rollout:
  enabled: true
  strategy: "Canary"
```

This instructs the Helm chart to generate a Rollout resource with a Canary strategy and its required services.

### 3.2. Blue-Green Deployment

**Configuration:** In a component's `values.yaml`, set:

```yaml
rollout:
  enabled: true
  strategy: "BlueGreen"
```

This instructs the Helm chart to generate a Rollout resource with a Blue-Green strategy and its required active and preview services.

---

## 4. Project Structure

```
.
├── argo-cd/
│   ├── apps/
│   │   ├── dev/            # Argo CD Application manifests for DEV
│   │   └── pre/            # Argo CD Application manifests for PRE
│   └── roots/
│       ├── root-app-dev.yaml # Root App that manages everything in dev/
│       └── root-app-pre.yaml # Root App that manages everything in pre/
├── helm-base/                # The single, shared Helm Chart for all components
│   ├── Chart.yaml
│   ├── templates/
│   └── values.yaml
├── kustomize/
│   ├── apps/                 # Application definitions
│   │   └── ...
│   ├── components/           # Reusable components
│   │   └── custom/
│   │      └── helloworld/
│   │          └── base/
│   │              ├── kustomization.yaml # -> Points to helm-base
│   │              └── values.yaml      # -> Configures helloworld
│   └── ...
└── services/                 # Docker build context and source code
  └── ...
```

---

## 5. How to Deploy

**Prerequisites:**
- Running Kubernetes cluster
- Argo CD and Argo Rollouts installed

**Deployment Commands:**

With the new "App of Apps" per environment structure, you only need to apply the root application for the environment you want to deploy.

```bash
# Deploy EVERYTHING for the DEV environment
kubectl apply -f argo-cd/roots/root-app-dev.yaml

# Deploy EVERYTHING for the PRE environment
kubectl apply -f argo-cd/roots/root-app-pre.yaml
```

Argo CD will detect the root application, which will then automatically discover and deploy all child applications defined in the corresponding `argo-cd/apps/` subdirectory.

---

### Managing Applications

- **To add a new app to an environment:** Add its `app-name.yaml` manifest to the correct subdirectory (e.g., `argo-cd/apps/dev/`) and commit. The root app will deploy it automatically.
- **To remove an app from an environment:** Delete its `app-name.yaml` manifest from the Git repository and commit. The root app, thanks to `prune: true`, will remove it from the cluster automatically.
==== ./export_poc_structure.sh ====
#!/bin/bash

# Borrar ficheros previos
rm -f skeleton-poc-*.txt

# Recorre el directorio actual y sus subdirectorios inmediatos
find . -maxdepth 1 -mindepth 1 -type d | while read -r DIR; do
  BASENAME=$(basename "$DIR")

  # Saltar si es .git o services
  [[ "$BASENAME" == ".git" || "$BASENAME" == "services" ]] && continue

  OUTFILE="skeleton-poc-${BASENAME}.txt"
  echo "📁 Directory structure for '$DIR'" > "$OUTFILE"
  tree -a -I '.git|services' "$DIR" >> "$OUTFILE"

  echo -e "\n📄 File contents within '$DIR' (recursive)" >> "$OUTFILE"

  # Buscar todos los archivos excepto los skeleton-poc
  find "$DIR" -type f \
    ! -path "*/.git/*" \
    ! -path "*/services/*" \
    ! -name "skeleton-poc-*" | while read -r FILE; do
      echo -e "\n==== $FILE ====" >> "$OUTFILE"
      cat "$FILE" >> "$OUTFILE"
  done

  echo "✅ Generated $OUTFILE"
done

# Incluir el propio directorio raíz también
OUTFILE="skeleton-poc-root.txt"
echo "📁 Directory structure for '.'" > "$OUTFILE"
tree -a -I '.git|services' . >> "$OUTFILE"

echo -e "\n📄 File contents within '.' (recursive)" >> "$OUTFILE"

find . -maxdepth 1 -type f \
  ! -name "skeleton-poc-*" | while read -r FILE; do
    echo -e "\n==== $FILE ====" >> "$OUTFILE"
    cat "$FILE" >> "$OUTFILE"
done

echo "✅ Generated $OUTFILE"

==== ./.gitignore ====
# .gitignore v1.0.0

# --- Archivos generados por Helm ---
# Directorios donde Helm descarga dependencias de charts.
# Si usas 'helm dependency build', estos se generan localmente.
charts/

# Paquetes de charts creados con 'helm package'
*.tgz

# Dependencias de Helm generadas por el CLI
tmp/
.helmignore

# --- Archivos generados por Kustomize ---
# Aunque los fuentes Kustomize se versionan, la salida directa de 'kustomize build'
# no suele subirse al repositorio en un flujo GitOps, ya que Argo CD lo construye en tiempo real.
# Sin embargo, si alguna vez generas un 'build' localmente y no quieres que se suba, puedes añadir:
# kustomize-build/ # O el nombre del directorio donde guardes la salida del build

# --- Archivos de configuración y entornos locales ---
# Si tienes archivos de valores sensibles que no deben subirse, añádelos aquí.
# Por ejemplo, si usas un 'values-secret.yaml' para credenciales locales:
# values-secret.yaml

# Archivos de entorno específicos de desarrollo
.env
.flaskenv

# --- Credenciales y secretos (si se generaran localmente) ---
# Cualquier archivo que contenga PATs, claves o certificados en texto plano
# Asegúrate de que el archivo del secreto Base64 *sí* esté versionado si lo gestionas con Kustomize,
# pero no la versión sin codificar si la generas localmente para el .dockerconfigjson
# Por ejemplo, si el token crudo estuviera en un archivo:
# my_raw_pat.txt

# Los archivos que usamos para generar el secreto .dockerconfigjson localmente
dockerconfig.json

# --- Archivos del sistema operativo ---
.DS_Store # macOS
Thumbs.db # Windows

# --- Archivos de entornos virtuales de Python (si aplica) ---
.venv/
env/
venv/
__pycache__/

# --- Archivos de IDEs / Editores ---
.idea/ # IntelliJ / PyCharm
.vscode/ # VS Code
*.iml
*.swp
*.swo

# --- Logs y directorios temporales ---
logs/
*.log
tmp/