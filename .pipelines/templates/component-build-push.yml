# .pipelines/templates/component-build-push.yml v3.2.0
# GitOps pipeline for DEV only: build, push, and auto-patch values.yaml

parameters:
  - name: serviceName
    type: string
  - name: servicePath
    type: string
  - name: acrRegistry
    type: string
  - name: acrServiceConnection
    type: string
  - name: sourceVersionShort
    type: string
  - name: chartBaseOciUrl
    type: string
    default: ''
  - name: chartBaseVersion
    type: string
    default: ''
  - name: autoUpdateValues
    type: boolean
    default: true
  - name: componentName
    type: string
    default: ''

jobs:
- job: BuildAndPushComponent
  displayName: 'Build and Push ${{ parameters.serviceName }}'
  pool:
    name: ams-gbl-dvp-nlv-weu-pipelines-vmss-ubuntu2204

  steps:
  - checkout: self
    persistCredentials: true

  - task: Docker@2
    displayName: 'Login to ACR'
    inputs:
      command: 'login'
      containerRegistry: ${{ parameters.acrServiceConnection }}

  - bash: |
      echo "##vso[task.setvariable variable=finalImageTag;isOutput=true]${{ parameters.sourceVersionShort }}"
      echo "##vso[task.setvariable variable=builtServiceName;isOutput=true]${{ parameters.serviceName }}"
    displayName: 'Set Image Tag for Dev Only'
    name: setVersionInfoStep

  - task: Docker@2
    displayName: 'Build Docker Image for ${{ parameters.serviceName }}'
    inputs:
      command: 'build'
      Dockerfile: '${{ parameters.servicePath }}/Dockerfile'
      containerRegistry: ${{ parameters.acrServiceConnection }}
      repository: '${{ parameters.serviceName }}'
      tags: |
        $(setVersionInfoStep.finalImageTag)
      buildArguments: '--build-arg TARGETARCH=$(TARGETARCH)'
      arguments: '--progress=plain'
    env:
      DOCKER_BUILDKIT: 1

  - task: Docker@2
    displayName: 'Push Docker Image to ACR'
    inputs:
      command: 'push'
      containerRegistry: ${{ parameters.acrServiceConnection }}
      repository: '${{ parameters.serviceName }}'
      tags: |
        $(setVersionInfoStep.finalImageTag)

  - task: Bash@3
    displayName: 'Patch image tag in dev values.yaml for ${{ parameters.componentName }}'
    condition: and(succeeded(), eq('${{ parameters.autoUpdateValues }}', 'true'))
    inputs:
      targetType: 'inline'
      script: |
        echo "üîç Searching for apps/dev/**/values/${{ parameters.componentName }}.yaml"
        find apps/dev -type f -path "*/values/${{ parameters.componentName }}.yaml" | while read file; do
          echo "‚úèÔ∏è Updating $file"
          yq e '.image.repository = "${{ parameters.acrRegistry }}/${{ parameters.serviceName }}"' -i "$file"
          yq e '.image.tag = "$(setVersionInfoStep.finalImageTag)"' -i "$file"
        done

        echo "üîç Checking for changes..."
        git config user.name "Azure DevOps"
        git config user.email "devops@mapal.com"
        git add apps/dev/**/values/${{ parameters.componentName }}.yaml

        if git diff --cached --quiet; then
          echo "‚úÖ No changes to commit."
        else
          git commit -m "chore(gitops): patch dev values for ${{ parameters.componentName }} to tag $(setVersionInfoStep.finalImageTag)"
          git push origin HEAD:main
          echo "‚úÖ Changes committed and pushed."
        fi
