📁 Directory structure for './helm-base'
./helm-base
├── Chart.yaml
├── _helpers.tpl
├── templates
│   ├── config-map.yaml
│   ├── deployment.yaml
│   ├── external-secrets.yaml
│   ├── hpa.yaml
│   ├── ingress.yaml
│   ├── persistentVolume.yaml
│   ├── persistentVolumeClaim.yaml
│   ├── rollout.yaml
│   ├── service-canary.yaml
│   ├── service-preview.yaml
│   └── service.yaml
└── values.yaml

2 directories, 14 files

📄 File contents within './helm-base' (recursive)

==== ./helm-base/templates/external-secrets.yaml ====
# helm-base/templates/external-secrets.yaml v1.1.0
# Updated to use the new "app." prefixed helper.
{{- include "app.externalSecretTemplate" (dict "appName" .Values.name "externalsecretName" "externalsecret-init" "secretName" "init-secrets" "releaseNamespace" $.Release.Namespace "configSection" .Values.initContainer) }}
{{- include "app.externalSecretTemplate" (dict "appName" .Values.name "externalsecretName" "externalsecret" "secretName" "secrets" "releaseNamespace" $.Release.Namespace "configSection" .Values.app) }}
{{- include "app.externalSecretTemplate" (dict "appName" .Values.name "externalsecretName" "externalsecret-cluster" "secretName" "secrets" "releaseNamespace" $.Release.Namespace "configSection" .Values.clusterSecrets ) }}
==== ./helm-base/templates/deployment.yaml ====
# helm-base/templates/deployment.yaml v1.0.0
# Template for the main Deployment resource.
{{- if not .Values.rollout.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}
spec:
  replicas: 1
  {{- if eq .Values.enableRecreateStrategy true }}
  strategy:
    type: Recreate
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
      labels:
        app: {{ .Values.name }}
        {{- if .Values.serviceAccount }}
        azure.workload.identity/use: "true"
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-map.yaml") . | sha256sum }}
    spec:
      {{- if .Values.serviceAccount }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      {{- if .Values.initContainer.enabled }}
      {{- with .Values.initContainer }}
      initContainers:
        - name: init
          image: {{ .image }}:{{ .version }}
          imagePullPolicy: Always
          {{- if or .configuration .secrets .additionalSecretRef }}
          envFrom:
            {{- if .configuration }}
            - configMapRef:
                name: {{ $.Values.name }}-init-config
            {{- end }}
            {{- if .secrets }}
            - secretRef:
                name: {{ $.Values.name }}-init-secrets
            {{- end }}
            {{- if .additionalSecretRef }}
            {{- toYaml .additionalSecretRef | nindent 12 }}
            {{- end }}
          {{- end }}
          {{- if or .volumeMounts .mountFiles }}
          volumeMounts:
            {{- with .volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if .mountFiles }}
            {{- range .mountFiles }}
            - name: {{ .name }}
              mountPath: {{ .path }}
              subPath: {{ .name }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .command }}
          command:
            {{- range .command }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- if .args }}
          args: {{ .args | toJson }}
          {{- end }}
          {{- if .resources }}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- with .livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- end }}
      containers:
        {{- with .Values.app }}
        - name: app
          image: {{ .registry }}/{{ .image }}:{{ .version }}
          imagePullPolicy: Always
          {{- if or (or .configuration .secretRef) (or .secretStoreRef .secrets) }}
          envFrom:
            {{- if .configuration }}
            - configMapRef:
                name: {{ $.Values.name }}-app-config
            {{- end }}
            {{- if .secretRef }}
            - secretRef:
                name: {{ .secretName }}
            {{- end }}
            {{- if .secrets }}
            - secretRef:
                name: {{ $.Values.name }}-secrets
            {{- end }}
          {{- end }}
          {{- if or .volumeMounts .mountFiles }}
          volumeMounts:
            {{- with .volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if .mountFiles }}
            {{- range .mountFiles }}
            - name: {{ .name }}
              mountPath: {{ .path }}
              subPath: {{ .name }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .command }}
          command:
            {{- range .command }}
            - {{ . | default "" | quote }}
            {{- end }}
          {{- end }}
          {{- if .args }}
          args:
            {{- range .args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}

        {{- if .Values.additionalContainers }}
        {{- range $name, $container := .Values.additionalContainers }}
        - name: {{ $name }}
          image: {{ $container.image }}:{{ $container.version }}
          imagePullPolicy: Always
          {{- if $container.configuration }}
          envFrom:
            - configMapRef:
                name: {{ $.Values.name }}-{{ $name }}-config
          {{- end }}
          {{- if or $container.volumeMounts $container.mountFiles }}
          volumeMounts:
            {{- with $container.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if $container.mountFiles }}
            {{- range $container.mountFiles }}
            - name: {{ .name }}
              mountPath: {{ .path }}
              subPath: {{ .name }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if $container.command }}
          command:
            {{- range $container.command }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- if $container.args }}
          args:
            {{- range $container.args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- with $container.resources }}
          resources: {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- with $container.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $container.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- end }}

      {{- if or .Values.volumes .Values.persistence.enabled .Values.initContainer.mountFiles .Values.app.mountFiles .Values.additionalContainers }}
      volumes:
          {{- if .Values.volumes }}
          {{- with .Values.volumes }}
        {{- toYaml . | nindent 8  }}
          {{- end }}
          {{- end }}
          {{- if .Values.initContainer.mountFiles }}
          {{- range .Values.initContainer.mountFiles }}
        - name: {{ .name }}
          configMap:
            name: {{ $.Values.name }}-init-{{ .name }}-config
          {{- end }}
          {{- end }}
          {{- if .Values.app.mountFiles }}
          {{- range .Values.app.mountFiles }}
        - name: {{ .name }}
          configMap:
            name: {{ $.Values.name }}-app-{{ .name }}-config
          {{- end }}
          {{- end }}
          {{- if .Values.additionalContainers }}
          {{- range $containerName, $container := .Values.additionalContainers }}
          {{- range $container.mountFiles }}
        - name: {{ .name }}
          configMap:
            name: {{ $.Values.name }}-{{ $containerName }}-{{ .name }}-config
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.persistence.enabled }}
          {{- $appName := .Values.name }}
          {{- range .Values.persistence.storages }}
          {{- $storageAccount := .name }}
          {{- range .containers.items }}
        - name: {{ .volumeName }}
          persistentVolumeClaim:
            claimName: {{ $appName }}-{{ $storageAccount }}-{{ .name }}-pvc
          {{- end }}
          {{- end }}
          {{- end }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- if and (.Values.toleration.key) (.Values.toleration.value) }}
      tolerations:
      - key: {{ .Values.toleration.key }}
        operator: "Equal"
        value: {{ .Values.toleration.value }}
        effect: "NoSchedule"
      {{- end }}

      {{- if .Values.nodeName }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: agentpool
                    operator: In
                    values:
                      - {{ .Values.nodeName }}
      {{- end }}
      enableServiceLinks: false
{{- end }}
==== ./helm-base/templates/service.yaml ====
# helm-base/templates/service.yaml v1.0.0
# Template for the main Service resource.
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}
  labels:
    meta.helm.sh/release-name: {{ .Values.name }}
spec:
  ports:
    - port: 80
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
  selector:
    app: {{ .Values.name }}
==== ./helm-base/templates/rollout.yaml ====
# helm-base/templates/rollout.yaml v1.0.0
# Template to generate an Argo Rollout resource when enabled in values.
{{- if .Values.rollout.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}
spec:
  replicas: 1 # O puedes hacerlo configurable: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  # La plantilla del pod es casi idéntica a la de tu deployment.yaml
  # La copiamos de allí.
  template:
    metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
      labels:
        app: {{ .Values.name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-map.yaml") . | sha256sum }}
    spec:
      # ... (aquí iría toda la sección spec.template.spec de tu deployment.yaml) ...
      containers:
      - name: app
        image: "{{ .Values.app.registry }}/{{ .Values.app.image }}:{{ .Values.app.version }}"
        ports:
        - containerPort: {{ .Values.service.targetPort }}
      # ... etc ...

  # Esta es la parte clave: la estrategia se configura desde los values
  strategy:
    {{- if eq .Values.rollout.strategy "Canary" }}
    canary:
      stableService: {{ .Values.name }}-service
      canaryService: {{ .Values.name }}-service-canary
      steps:
      - setWeight: 20
      - pause: {}
    {{- else if eq .Values.rollout.strategy "BlueGreen" }}
    blueGreen: 
      activeService: {{ .Values.name }}-service
      previewService: {{ .Values.name }}-service-preview
      autoPromotionEnabled: false
    {{- end }}
{{- end }}
==== ./helm-base/templates/persistentVolumeClaim.yaml ====
# helm-base/templates/persistentVolumeClaim.yaml v1.1.0
# Updated to use the new "app." prefixed helper.
{{- if .Values.persistence.enabled }}
  {{- range .Values.persistence.storages }}
    {{- $storageName := .name }}
    {{- if .containers }}
      {{- $containerStorageClass := .containers.storageClass | default "azureblob-fuse-premium" }}
      {{- range .containers.items }}
        {{- $item := dict "resourceName" (print $.Values.name "-" $storageName "-" .name "-pvc") "storageSize" "100Gi" "volumeResourceName" (print $.Values.name "-" $storageName "-" .name "-pv") "storageClassName" $containerStorageClass }}
        {{- template "app.pvcTemplate" $item }}
      {{- end }}
    {{- end}}
    {{- if .fileShares }}
      {{- $fileShareStorageClass := .fileShares.storageClass | default "azurefile-csi" }}
      {{- range .fileShares.items }}
        {{- $item := dict "resourceName" (print $.Values.name "-" $storageName "-" .name "-pvc") "storageSize" "5Gi" "volumeResourceName" (print $.Values.name "-" $storageName "-" .name "-pv") "storageClassName" $fileShareStorageClass }}
        {{- template "app.pvcTemplate" $item }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
==== ./helm-base/templates/service-canary.yaml ====
# helm-base/templates/service-canary.yaml v1.0.0
# Generates the canary service, only if the strategy is Canary.
{{- if and .Values.rollout.enabled (eq .Values.rollout.strategy "Canary") }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}-service-canary
spec:
  ports:
    - port: 80
      targetPort: {{ .Values.service.targetPort }}
  selector:
    app: {{ .Values.name }}
{{- end }}
==== ./helm-base/templates/persistentVolume.yaml ====
# helm-base/templates/persistentVolume.yaml v1.1.0
# Updated to use the new "app." prefixed helper.
{{- if .Values.persistence.enabled }}
  {{- range .Values.persistence.storages }}
    {{- $storageName := .name }}
    {{- $secretName := .secretName }}
    {{- if .containers }}
      {{- $containerStorageClass := .containers.storageClass | default "azureblob-fuse-premium" }}
      {{- $releaseNamespace := $.Release.Namespace }}
      {{- range .containers.items }}
        {{- $item := dict "name" (print $.Values.name "-" $storageName "-" .name "-pv") "storageClassName" $containerStorageClass "type" "blob" "containerName" .name "secretName" $secretName "releaseNamespace" $releaseNamespace }}
        {{- template "app.pvTemplate" $item }}
      {{- end }}
    {{- end }}
    {{- if .fileShares }}
      {{- $fileShareStorageClass := .fileShares.storageClass | default "azurefile-csi" }}
      {{- $releaseNamespace := $.Release.Namespace }}
      {{- range .fileShares.items }}
        {{- $item := dict "name" (print $.Values.name "-" $storageName "-" .name "-pv") "storageClassName" $fileShareStorageClass "type" "azurefile" "containerName" .name "secretName" $secretName "releaseNamespace" $releaseNamespace }}
        {{- template "app.pvTemplate" $item }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
==== ./helm-base/templates/hpa.yaml ====
# helm-base/templates/hpa.yaml v1.0.0
# Template for the HorizontalPodAutoscaler resource.
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}
  labels:
    meta.helm.sh/release-name: {{ .Values.name }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.name }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: {{ .Values.autoscaling.stabilizationSeconds }}
    scaleDown:
      stabilizationWindowSeconds: {{ .Values.autoscaling.stabilizationSeconds }}
==== ./helm-base/templates/config-map.yaml ====
# helm-base/templates/config-map.yaml v1.0.0
# Template for ConfigMap resources.
{{- $appName := .Values.name }}

{{- if or .Values.app.configuration .Values.global }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $appName }}-app-config
  labels:
    app: {{ $appName }}
data:
{{- if .Values.app.configuration }}
{{- with .Values.app.configuration }}
{{- range $key, $value := . }}
  {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.global.configuration }}
{{- range $key, $value := .Values.global.configuration }}
  {{- if kindIs "string" $value }}
  {{ $key }}: {{ $value | quote }}
  {{- else }}
  {{ $key }}: |
{{ $value | indent 2 }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .Values.app.mountFiles }}
{{range $file := .Values.app.mountFiles }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $appName }}-app-{{ $file.name }}-config
  labels:
    app: {{ $appName }}
data:
  {{ $file.name }}: |
{{ $file.data | indent 4 }}
{{- end }}
{{- end }}

{{- range $containerName, $containerSpecs := .Values.additionalContainers }}
{{- if $containerSpecs.configuration }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $appName }}-{{ $containerName }}-config
  labels:
    app: {{ $appName }}
data:
{{- with $containerSpecs.configuration }}
{{- range $key, $value := . }}
  {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
{{- end }}
{{- if $containerSpecs.mountFiles }}
{{range $file := $containerSpecs.mountFiles }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $appName }}-{{ $containerName }}-{{ $file.name }}-config
  labels:
    app: {{ $appName }}
data:
  {{ $file.name }}: |
{{ $file.data | indent 4 }}
{{- end }}
{{- end }}
{{- end }}

{{- if and .Values.initContainer.enabled .Values.initContainer.configuration }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $appName }}-init-config
  labels:
    app: {{ $appName }}
data:
{{- with .Values.initContainer.configuration }}
{{- range $key, $value := . }}
  {{ $key }}: {{ $value | quote }}
{{- end }}
{{- end }}
{{- end }}

{{- if and .Values.initContainer.enabled .Values.initContainer.mountFiles }}
{{range $file := .Values.initContainer.mountFiles }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $appName }}-init-{{ $file.name }}-config
  labels:
    app: {{ $appName }}
data:
  {{ $file.name }}: |
{{ $file.data | indent 4 }}
{{- end }}
{{- end }}
==== ./helm-base/templates/service-preview.yaml ====
# helm-base/templates/service-preview.yaml v1.0.0
# Generates the preview service, only if the strategy is BlueGreen.
{{- if and .Values.rollout.enabled (eq .Values.rollout.strategy "BlueGreen") }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}-service-preview
spec:
  ports:
    - port: 80
      targetPort: {{ .Values.service.targetPort }}
  selector:
    app: {{ .Values.name }}
{{- end }}
==== ./helm-base/templates/ingress.yaml ====
# helm-base/templates/ingress.yaml v1.0.0
# Template for Ingress resources.
{{- if .Values.ingressSecure.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.name }}-auth
  labels:
      meta.helm.sh/release-name: {{ .Values.name }}
  annotations:
{{ toYaml .Values.ingressSecure.annotations | trim | indent 4 }}
spec:
  {{- if .Values.ingressSecure.ingressClass }}
  ingressClassName: {{ .Values.ingressSecure.ingressClass }}
  {{- end }}
  rules:
    - host: {{ .Values.ingressSecure.hosts.host }}
      http:
        {{- include "ingressSecurePaths" . | nindent 8 }}
  tls:
    - hosts:
      {{- toYaml .Values.ingressSecure.tls.hosts | trim | nindent 6 }}
      secretName: {{ .Values.ingressSecure.tls.secretName }}
{{- end }}


{{- if .Values.ingresses }}
{{- range .Values.ingresses }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ $.Values.name }}-{{ .name }}
  labels:
    meta.helm.sh/release-name: {{ $.Values.name }}
  annotations:
{{ toYaml .annotations | trim | indent 4 }}
spec:
  {{- if .ingressClassName }}
  ingressClassName: {{ .ingressClassName }}
  {{- end }}
  rules:
    {{- range .hosts }}
    - host: {{ .host }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ $.Values.name }}
                port:
                  number: {{ .port }}
          {{- end }}
    {{- end }}
  {{- if .tls }}
  tls:
    - hosts:
      {{- toYaml .tls.hosts | trim | nindent 6 }}
      {{- if .tls.secretName }}
      secretName: {{ .tls.secretName }}
      {{- end }}
  {{- end }}
{{- end }}
{{- end }}

{{- range .Values.ingressList }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: {{ include "helm-base.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .name }}
  labels:
    meta.helm.sh/release-name: {{ .name }}
  annotations:
{{ toYaml .annotations | trim | indent 4 }}
spec:
  {{- if .Values.ingressClass }}
  ingressClassName: {{ .Values.ingressClass }}
  {{- end }}
  rules:
    - host: {{ .hosts.host }}
      http:
        {{- include "ingressListPaths" . | nindent 8 }}
  tls:
    - hosts:
      {{- toYaml .tls.hosts | trim | nindent 6 }}
      secretName: {{ .tls.secretName }}
---
{{- end }}
==== ./helm-base/values.yaml ====
replicaCount: 1
image:
  repository: myrepo/image
  tag: latest
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 256Mi

==== ./helm-base/Chart.yaml ====
# helm-base/Chart.yaml v1.0.0
# Metadata for the base Helm chart.
apiVersion: v2
name: msw-cic-helm-chart-base
description: A base Helm chart for deploying standard applications
type: application
version: 1.0.0
appVersion: "1.0"
==== ./helm-base/_helpers.tpl ====
#!/bin/bash
set -e

echo "🔧 Starting GitOps PoC update..."

# Clean up previous backups to avoid Helm/Kustomize parsing errors
echo "🧹 Cleaning up old .bak files..."
find . -name "*.bak" -delete

# 1. Add syncPolicy to Argo CD Application YAMLs
echo "⚙️  Updating Argo CD Applications..."
find argo-cd/apps -name "*.yaml" | while read -r file; do
  grep -q "syncPolicy" "$file" || {
    cp "$file" "$file.bak"
    yq eval '.spec += {"syncPolicy": {"automated": {"prune": true, "selfHeal": true}}}' "$file.bak" > "$file"
    echo "✅ Added syncPolicy to $file"
  }
done

# 2. Ensure Helm templates have labels
echo "🏷️  Ensuring standard labels in Helm templates..."
for chart in helm-base helm-cronjob-base; do
  for tmpl in $(find "$chart/templates" -name "*.yaml"); do
    cp "$tmpl" "$tmpl.bak"
    grep -q "app.kubernetes.io/name" "$tmpl" || sed -i '/metadata:/a\
  labels:\
    app.kubernetes.io/name: {{ include "'"$chart"'.name" . }}\
    app.kubernetes.io/instance: {{ .Release.Name }}\
    app.kubernetes.io/managed-by: {{ .Release.Service }}' "$tmpl"
    echo "✅ Labels updated in $tmpl"
  done
done

# 3. Update values.yaml with required fields
echo "📦 Checking values.yaml..."
for chart in helm-base helm-cronjob-base; do
  f="$chart/values.yaml"
  cp "$f" "$f.bak"
  yq eval '
    .replicaCount = (.replicaCount // 1) |
    .image.repository = (.image.repository // "myrepo/image") |
    .image.tag = (.image.tag // "latest") |
    .resources.requests.cpu = (.resources.requests.cpu // "100m") |
    .resources.requests.memory = (.resources.requests.memory // "128Mi") |
    .resources.limits.cpu = (.resources.limits.cpu // "500m") |
    .resources.limits.memory = (.resources.limits.memory // "256Mi") |
    .jobName = (.jobName // "demo-cron") |
    .projectName = (.projectName // "myproject") |
    .schedule = (.schedule // "0 * * * *") |
    .version = (.version // "1.0.0")
  ' "$f.bak" > "$f"
  echo "✅ values.yaml updated for $chart"
done

# 4. Patch kustomization.yaml files
echo "🧩 Updating kustomization.yaml..."
find kustomize -name kustomization.yaml | while read -r kf; do
  cp "$kf" "$kf.bak"
  yq eval '
    .namespace = (.namespace // "default") |
    .commonLabels = (.commonLabels // {}) |
    .commonLabels.app = (.commonLabels.app // "myapp")
  ' "$kf.bak" > "$kf"
  echo "✅ Patched $kf"
done

# 5. Fix deprecated kustomize fields
echo "♻️  Fixing deprecated fields with 'kustomize edit fix'..."
find kustomize -name kustomization.yaml -execdir kustomize edit fix \;

# 6. Create dummy rollout.yaml if missing to avoid kustomize errors
echo "📄 Creating missing rollout.yaml where necessary..."
mkdir -p kustomize/components/custom/sun/base
touch kustomize/components/custom/sun/base/rollout.yaml
mkdir -p kustomize/components/custom/helloworld/base
touch kustomize/components/custom/helloworld/base/rollout.yaml

# 7. Validate Helm
echo "🔍 Validating Helm charts..."
helm lint helm-base || true
helm lint helm-cronjob-base || true

# 8. Validate Kustomize overlays
echo "🔍 Validating Kustomize overlays..."
for env in dev pre; do
  for app in kustomize/apps/*/overlays/$env; do
    echo "🧪 $app"
    kustomize build "$app" > /dev/null || echo "❌ Error in $app"
  done
done

echo "✅ Update complete."
